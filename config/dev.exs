import Config

import_config "./env.exs"

case WeCraft.Env.load() do
  :ok -> :ok
  {:error, _} -> IO.puts("No .env file found, using default configuration")
end

{project_path, 0} = System.cmd("pwd", [])
project_path = String.replace(project_path, ~r/\n/, "/")

config :we_craft,
  env: :dev,
  jitsi_domain: "localhost:8884"

config :git_hooks,
  hooks: [
    pre_commit: [
      tasks: [
        {:mix_task, :format},
        {:mix_task, :credo, ["--strict"]}
      ]
    ],
    pre_push: [
      tasks: [
        {:cmd, "mix compile --force --warnings-as-errors"},
        {:mix_task, :format, ["--check-formatted"]},
        {:mix_task, :dialyzer, ["--force-check"]},
        {:mix_task, :credo, ["--strict"]},
        {:cmd, "mix compile --force --warnings-as-errors", env: [{"MIX_ENV", "test"}]},
        {:cmd, "make test"},
        {:cmd, "mix coveralls.cobertura"},
        {:cmd, "echo 'success!' ðŸŽ‰"}
      ]
    ]
  ],
  project_path: project_path

config :waffle,
  storage: Waffle.Storage.S3,
  # or {:system, "AWS_S3_BUCKET"}
  bucket: "uploads",
  asset_host: "http://localhost:9010/uploads"

# Configure your database
config :we_craft, WeCraft.Repo,
  username: "postgres",
  password: "postgres",
  hostname: "localhost",
  database: "wecraft_dev",
  port: 5469,
  stacktrace: true,
  show_sensitive_data_on_connection_error: true,
  pool_size: 10

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we can use it
# to bundle .js and .css sources.
config :we_craft, WeCraftWeb.Endpoint,
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  http: [ip: {127, 0, 0, 1}, port: String.to_integer(System.get_env("PORT") || "4000")],
  check_origin: false,
  code_reloader: true,
  debug_errors: true,
  secret_key_base: "qX1zITanEQyeGzl0NtARprG8JXbT9hp00w5p/NHOZ/0swir+jvDOu3EgThvHNeTN",
  watchers: [
    esbuild: {Esbuild, :install_and_run, [:we_craft, ~w(--sourcemap=inline --watch)]},
    tailwind: {Tailwind, :install_and_run, [:we_craft, ~w(--watch)]}
  ]

# Configure ExAws for MinIO
config :ex_aws,
  json_codec: Jason,
  # From docker-compose MINIO_ROOT_USER
  access_key_id: "AKIAIOSFODNN7EXAMPLE",
  # From docker-compose MINIO_ROOT_PASSWORD
  secret_access_key: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
  # Default region
  region: "local",
  s3: [
    scheme: "http://",
    host: "localhost",
    # MinIO API port
    port: 9010,
    # Required for MinIO
    force_path_style: true
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :we_craft, WeCraftWeb.Endpoint,
  live_reload: [
    web_console_logger: true,
    patterns: [
      ~r"priv/static/(?!uploads/).*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/we_craft_web/(?:controllers|live|components|router)/?.*\.(ex|heex)$"
    ]
  ]

# Enable dev routes for dashboard and mailbox
config :we_craft, dev_routes: true

# Do not include metadata nor timestamps in development logs
config :logger, :default_formatter, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

config :phoenix_live_view,
  # Include debug annotations and locations in rendered markup.
  # Changing this configuration will require mix clean and a full recompile.
  debug_heex_annotations: true,
  debug_tags_location: true,
  # Enable helpful, but potentially expensive runtime checks
  enable_expensive_runtime_checks: true

config :we_craft, WeCraft.Mailer, adapter: Swoosh.Adapters.Local

# Disable swoosh api client as it is only required for production adapters.
config :swoosh, :api_client, false

config :we_craft,
  email_from_name: "Account's corp",
  email_from_address: "accounts@corps.com",
  marketing_link: "http://localhost:4000",
  base_url: "http://localhost:4000",
  admin_email: "admin@wecraftapp.com",
  open_observe_credentials: %{
    username: "guillaume.bailleul@gmail.com",
    password: "TmPmjxAz8bJ6ieSp"
  }

config :logger,
  backends: [:console, WeCraft.LoggerOpenTelemetryBackend],
  level: :debug

# config :logger_json, :backend,
#   metadata: :all,
#   formatter: LoggerJSON.Formatters.GoogleCloudLogger

# Enable OpenTelemetry SDK - using stdout for now as OpenObserve doesn't directly support OTLP
# We'll rely on our direct logging module for OpenObserve integration
config :opentelemetry,
  resource: %{
    # Add service identification attributes
    "service.name": "web",
    "service.namespace": "wecraft_dev",
    "deployment.environment": "development"
  },
  processors: [
    {:otel_batch_processor,
     %{
       # Using stdout exporter for debugging purposes
       exporter: {
         :opentelemetry_exporter,
         %{endpoints: [{:http, "localhost", 4318, []}]}
       }
     }}
  ]
